(defstruct cursor
  x
  y
  )

(defvar cursor (make-cursor))
(defvar cursor-information nil)

(defun get-cursor-information ()
  (case (char (aref main-map (cursor-y cursor) (cursor-x cursor)) 0)
    (#\O (setf cursor-information "Tree"))
    (#\. (setf cursor-information "Floor"))
    (#\# (setf cursor-information "Wall"))
    (otherwise (setf cursor-information ""))
    )
  (setf cursor-information (with-output-to-string (stream)
	      (write-string cursor-information stream)
	      (terpri stream)
	      ))
  (if (not (eq (aref enemy-array (cursor-y cursor) (cursor-x cursor)) 0))
      (progn (setf cursor-information (concatenate 'string cursor-information (entity-name (aref enemy-array (cursor-y cursor) (cursor-x cursor)))))
	     (setf cursor-information (with-output-to-string (stream)
					(write-string cursor-information stream)
					(terpri stream)
					))))
  (if (not (eq (aref item-array (cursor-y cursor) (cursor-x cursor)) 0))
      (setf cursor-information (concatenate 'string cursor-information (item-name (aref item-array (cursor-y cursor) (cursor-x cursor)))))
      )
  )

(defun cursor-move (dir)
  (let* ((move-x (car (cadr (assoc dir direction-list))))
	 (move-y (cadr (cadr (assoc dir direction-list))))
	 (c-x (+ (cursor-x cursor) move-x))
	 (c-y (+ (cursor-y cursor) move-y))
	 (p-x (cadr (assoc :x (entity-position player))))
	 (p-y (cadr (assoc :y (entity-position player))))
	 )
    (if (and (> c-x 0)
	     (< c-x (1- (cadr (array-dimensions main-map))))
	     (> c-y 0)
	     (< c-y (1- (car (array-dimensions main-map)))))
	(progn (if (or (and (> (cursor-x cursor) 1)
			    (or (> (- (cursor-x cursor) p-x) (* -1 (1- (/ (car max-characters) 2))))
				(and (> (cursor-x cursor) (- (cadr (array-dimensions main-map)) (car max-characters)))
				     (> p-x (- (cadr (array-dimensions main-map)) (/ (car max-characters) 2)))))
			    (< move-x 0))
		       (and (< (cursor-x cursor) (- (cadr (array-dimensions main-map)) 2))
			    (or (< (- (cursor-x cursor) p-x) (1- (/ (car max-characters) 2)))
				(and (< p-x (1- (/ (car max-characters) 2)))
				     (< c-x (car max-characters)))

;				(and ;;;;(< (cursor-x cursor) (- (cadr (array-dimensions main-map)) (car max-characters)))
				     ;;;;(< (+ (cursor-x cursor) (/ (car max-characters) 2)) (+ (assoc :x (entity-position player)) (/ (car max-characters) 2)))
				 ;;;;(< c-x (+ p-x (/ (car max-characters) 2)))
				(> p-x (- (cadr (array-dimensions main-map)) (/ (car max-characters) 2))));;;)))
			    #|(or (< (- p-x (cursor-x cursor)) (1- (/ (car max-characters) 2)))
				(< (cursor-x cursor) (car max-characters)))|#
			    (> move-x 0)))
		   (incf (cursor-x cursor) move-x))
	       (if (or (and (> (cursor-y cursor) 1)
			    (or (> (- (cursor-y cursor) p-y) (* -1 (1- (/ (cadr max-characters) 2))))
				(and (> (cursor-y cursor) (- (car (array-dimensions main-map)) (cadr max-characters)))
				     (> p-y (- (car (array-dimensions main-map)) (/ (cadr max-characters) 2)))))
			    (< move-y 0))
		       (and (< (cursor-y cursor) (- (car (array-dimensions main-map)) 2))
			    (or (< (- (cursor-y cursor) p-y) (1- (/ (cadr max-characters) 2)))
				(and (< p-y (1- (/ (cadr max-characters) 2)))
				     (< c-y (cadr max-characters)))

;				(and ;;;;(< (cursor-x cursor) (- (cadr (array-dimensions main-map)) (car max-characters)))
				     ;;;;(< (+ (cursor-x cursor) (/ (car max-characters) 2)) (+ (assoc :x (entity-position player)) (/ (car max-characters) 2)))
				 ;;;;(< c-x (+ p-x (/ (car max-characters) 2)))
				(> p-y (- (car (array-dimensions main-map)) (/ (cadr max-characters) 2))));;;)))
			    #|(or (< (- p-x (cursor-x cursor)) (1- (/ (car max-characters) 2)))
				(< (cursor-x cursor) (car max-characters)))|#
			    (> move-y 0)))
		   (incf (cursor-y cursor) move-y)
		   )))
    (if cursor-buffer
	(progn (sdl2:destroy-texture cursor-buffer)
	       (setf cursor-buffer nil)))
    ))
